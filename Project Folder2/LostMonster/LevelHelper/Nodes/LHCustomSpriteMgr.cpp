//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.mm
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////

#include "LHCustomSpriteMgr.h"
#include <iostream>
#include <fstream>

#include "LHBatch.h"
#include "../Utilities/LHDictionary.h"
#include "LHSprite.h"


LHCustomSpriteMgr *LHCustomSpriteMgr::m_sharedInstance = 0;

////////////////////////////////////////////////////////////////////////////////
LHCustomSpriteMgr* LHCustomSpriteMgr::sharedInstance(){
	if (0 == m_sharedInstance){
		m_sharedInstance = new LHCustomSpriteMgr();
	}
    return m_sharedInstance;
}
////////////////////////////////////////////////////////////////////////////////
LHCustomSpriteMgr::~LHCustomSpriteMgr()
{
    
}
////////////////////////////////////////////////////////////////////////////////
LHCustomSpriteMgr::LHCustomSpriteMgr(){
    baseSpriteClass= lh_spriteCreationMethods(&LHSprite::spriteWithDictionary,
                                              &LHSprite::batchSpriteWithDictionary);
}
////////////////////////////////////////////////////////////////////////////////
void LHCustomSpriteMgr::registerBaseSpriteClass(pt2FileSprite fSprite,
                             pt2BatchSprite bSprite){
    baseSpriteClass = std::make_pair(fSprite, bSprite);
}

lh_spriteCreationMethods LHCustomSpriteMgr::baseClass(){
    return baseSpriteClass;
}
////////////////////////////////////////////////////////////////////////////////
void LHCustomSpriteMgr::registerCustomSpriteClassForTag(pt2FileSprite fSprite,
                                                        pt2BatchSprite bSprite, 
                                                        int tag){
    
    classesDictionary[tag] = std::make_pair(fSprite, bSprite);
}

lh_spriteCreationMethods LHCustomSpriteMgr::customSpriteClassForTag(int tag){
    
     std::map<int, lh_spriteCreationMethods >::iterator it;
        
    it=classesDictionary.find(tag);
    
    if(it == classesDictionary.end()){
        return baseSpriteClass;
    }
    return it->second;
}
