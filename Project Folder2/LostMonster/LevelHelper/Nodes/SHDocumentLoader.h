//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.h
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef __SHDOCUMENT_LOADER_NODE__
#define __SHDOCUMENT_LOADER_NODE__

#include "cocos2d.h"
using namespace cocos2d;

#include <string>

class LHDictionary;

//------------------------------------------------------------------------------
class SHSceneNode : public CCObject {

public:    
    
    virtual bool initSceneNodeWithContentOfFile(const std::string& sceneFile);
    virtual ~SHSceneNode();
    SHSceneNode();
    
    static SHSceneNode* SHSceneNodeWithContentOfFile(const std::string& sceneFile);
    
    LHDictionary* infoForSpriteNamed(const std::string& name, const std::string& sheetName);
    LHDictionary* infoForSheetNamed(const std::string& sheetName);
    LHDictionary* infoForAnimationNamed(const std::string& animName);

private:
    LHDictionary* sheets; //key sheetName - object LHDictionary
    LHDictionary* animations; //key animName - object LHDictionary
};


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
class SHDocumentLoader {
    
public:

    virtual ~SHDocumentLoader();
    static SHDocumentLoader* sharedInstance(void);

    //this method will also create the appropriate info if the info is not already loaded
    LHDictionary* dictionaryForSpriteNamed(const std::string& spriteName,
                                           const std::string& sheetName,
                                           const std::string& spriteHelperDoc);
    
    LHDictionary* dictionaryForSheetNamed(const std::string& sheetName,
                                          const std::string& spriteHelperDocument);
    
    LHDictionary* dictionaryForAnimationNamed(const std::string& animName,
                                              const std::string& spriteHelperDocument);
private:

    //we use this because almost 90% of the time the user (or levelhelperloader)
    //will ask for the same exact info - so we dont want to search everytime for
    //the same info - we give it back faster this way
    LHDictionary* lastSheetDictionary;//week ptr
    LHDictionary* lastAnimationDictionary;//week ptr
    LHDictionary* lastSpriteDictionary;//week ptr
    
    std::string lastSprSpriteName;
    std::string lastSprSheetName;
    std::string lastSprDocumentName;
    
    std::string lastSheetSheetName;
    std::string lastSheetDocumentName;
    
    std::string lastAnimName;
    std::string lastAnimDocumentName;

    
    
    
    SHSceneNode* sceneNodeForSHDocument(const std::string& shDocument);
    
    SHDocumentLoader();
    static SHDocumentLoader* m_sharedInstance;
    
#if COCOS2D_VERSION >= 0x00020000    
    CCDictionary scenes;
#else
    CCMutableDictionary<std::string>  scenes;
#endif
    
};
#endif	
